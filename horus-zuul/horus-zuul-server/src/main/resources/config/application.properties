#运行时启用哪个环境的配置文件，一般在pom里面指定 
spring.profiles.active=@profiles.active@
#server.context-path=/@build.finalName@
#鉴权模块全局配置配置
zuulUtil.monitor.zuulSecurityLabel=true
#读取外置logback.xml文件,true读取
zuulUtil.application.logbackExtrapositionWay=true
#logback.xml的文件名称
zuulUtil.application.logbackName=logback.xml
#外置logback.xml文件所在路径
zuulUtil.application.logbackPath=/apps/config/zuul/
#ribbon client 注册
zuulUtil.application.ribbonClientNames=chaos-service-provider
#ribbon负载均衡策略配置
zuulUtil.application.ribbonRuleName=ZoneAvoidanceRule

#示是否注册自身到eureka服务器
eureka.client.registerWithEureka=true
#eureka健康检查
eureka.client.healthcheck.enabled=true
#将自身的主机IP曝露给注册中心
eureka.instance.prefer-ip-address = true
#注册服务中心互相发现机制启动
spring.cloud.config.discovery.enabled=true
#安全通信端口
#securePort=443
#是否启用安全端口接受请求
#securePortEnabled=true
#eureka节点定时续约时间
eureka.instance.leaseRenewalIntervalInSeconds=15
#eureka节点剔除时间
eureka.instance.leaseExpirationDurationInSeconds=45
#从注册中心获取注册信息的时间间隔
eureka.client.registryFetchIntervalSeconds=5
eureka.client.eureka-server-connect-timeout-seconds=15
eureka.client.eureka-server-read-timeout-seconds=10
#自动获取主机IP , 注意：要在本机/etc/host 里面配置主机IP; 端口要在本文档上下文获取 
eureka.instance.instance-id=${spring.cloud.client.ipAddress}:zuul-server-peer:${server.port}
#禁用指定拦截器，FormBodyWrapperFilter ，消耗较大的性能
#zuul.FormBodyWrapperFilter.pre.disable=true


#开启hystrix容错，默认是不开启的，目前应用还未加入容错机制
#feign.hystrix.enabled=true
hystrix.command.default.execution.timeout.enabled=true
#设置hystrix超时时间
hystrix.command.default.execution.isolation.thread.timeoutInMilliseconds=60000
#熔断配置
#熔断窗口时间的标本数量
#hystrix.command.default.circuitBreaker.requestVolumeThreshold=20
#熔断时间
#hystrix.command.default.circuitBreaker.sleepWindowInMilliseconds=5000
#容器窗口的错误占比，百分制
#hystrix.command.default.circuitBreaker.errorThresholdPercentage=50
#熔断窗口时间
#hystrix.command.default.metrics.rollingStats.timeInMilliseconds=10000
#hystrix窗口期内监控上报的并发上限
#hystrix.command.default.metrics.rollingPercentile.bucketSize=100

#重试机制开启为true，关闭为false
spring.cloud.loadbalancer.retry.enabled=true
ribbon.eureka. enabled=true
#建立连接超时时间，原1000
ribbon.ConnectTimeout=60000
#请求处理的超时时间，5分钟
ribbon.ReadTimeout=60000
#所有操作都重试
ribbon.OkToRetryOnAllOperations=true
#重试发生，更换节点数最大值
ribbon.MaxAutoRetriesNextServer=10
#单个节点重试最大值
ribbon.MaxAutoRetries=1
ribbon.MaxAutoRetries.MaxTotalHttpConnections=2000

#zuul.okhttp.enabled=true
zuul.semaphore.max-semaphores=500
#zuul路由最大连接数
zuul.host.maxTotalConnections=200
#每个路由最大线程数
zuul.host.maxPerRouteConnections=1000
zuul.host.max-per-route-connections=5
zuul.host.socket-timeout-millis=60000
zuul.host.connect-timeout-millis=60000


#undertow并发配置
# 设置IO线程数, 它主要执行非阻塞的任务,它们会负责多个连接, 默认设置每个CPU核心一个线程
server.undertow.io-threads=19
# 阻塞任务线程池, 当执行类似servlet请求阻塞操作, undertow会从这个线程池中取得线程,它的值设置取决于系统的负载
server.undertow.worker-threads=20
#以下的配置会影响buffer,这些buffer会用于服务器连接的IO操作,有点类似netty的池化内存管理 ，每块buffer的空间大小,越小的空间被利用越充分，比如，，1024 能达到10M/s
server.undertow.buffer-size=1024
# 每个区分配的buffer数量 , 所以pool的大小是buffer-size * buffers-per-region
server.undertow.buffers-per-region=2048
# 是否分配的直接内存
server.undertow.direct-buffers=true
#最大分区数量
server.undertow.max-regions=10
#socket-binding="http"，保持长连接
server.undertow.always-set-keep-alive=true

#文件最大尺寸
spring.http.multipart.maxFileSize=200Mb
spring.http.multipart.maxRequestSize=200Mb

mybatis.typeAliasesPackage=com.fomoney.horus.core.commons.entity
mybatis.mapperLocations=classpath*:mapper/*.xml

# 下面为连接池的补充设置，应用到上面所有数据源中
# 初始化大小，最小，最大
spring.datasource.initialSize=5
spring.datasource.minIdle=5
spring.datasource.maxActive=20
# 配置获取连接等待超时的时间，1分钟
spring.datasource.maxWait=60000
# 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒，1分钟
spring.datasource.timeBetweenEvictionRunsMillis=60000
# 配置一个连接在池中最小生存的时间，单位是毫秒
spring.datasource.minEvictableIdleTimeMillis=300000
#测试数据库
spring.datasource.validationQuery=SELECT 1 FROM DUAL
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
# 打开PSCache，并且指定每个连接上PSCache的大小
spring.datasource.poolPreparedStatements=true
# 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'stat'用于sql统计，'wall'用于防火墙（防止sql注入),
spring.datasource.filters=stat,wall
# 通过connectProperties属性来打开mergeSql功能；慢SQL记录
spring.datasource.connectionProperties=druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
spring.datasource.maxPoolPreparedStatementPerConnectionSize=20
# 合并多个DruidDataSource的监控数据
#spring.datasource.useGlobalDataSourceStat=true

